// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;

// Plus imports for other components in your app.
@use 'sass:map';

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$primary-palette: mat.$teal-palette;
$primary-palette-defined: mat.define-palette($primary-palette);
$accent-palette: mat.$indigo-palette;
$accent-palette-defined: mat.define-palette($accent-palette);

// The warn palette is optional (defaults to red).
$warn-palette-defined: mat.define-palette(mat.$red-palette);
$link-palette-primary: mat.$blue-palette;
$link-palette-secondary: mat.$cyan-palette;
$primary-color: mat.get-color-from-palette($primary-palette, 500);

:root {
    --primary-color: #{$primary-color};
}

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$light-theme-defined: mat.define-light-theme((
    color: (
        primary: $primary-palette-defined,
        accent: $accent-palette-defined,
        warn: $warn-palette-defined
    )
));

$dark-theme-defined: mat.define-dark-theme((
    color: (
        primary: $primary-palette-defined,
        accent: $accent-palette-defined,
        warn: $warn-palette-defined
    )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($light-theme-defined);

@mixin dark-theme {
    @media (prefers-color-scheme: dark) {
        @content;
    }

    .dark-theme {
        @content;
    }
}

@include dark-theme {
    @include mat.all-legacy-component-colors($dark-theme-defined);
}

/* You can add global styles to this file, and also import other style files */
a:not(.mat-menu-item):not(.mat-button-base) {
    &:link, &:visited {
        text-decoration: none;
        color: mat.get-color-from-palette($link-palette-primary, 800);
    }

    &:hover, &:active {
        text-decoration: underline;
        color: mat.get-color-from-palette($link-palette-secondary, 800);
    }
}

@include dark-theme {
    a:not(.mat-menu-item):not(.mat-button-base)  {
        &:link, &:visited {
            color: mat.get-color-from-palette($link-palette-primary, 300);
        }

        &:hover, &:active {
            color: mat.get-color-from-palette($link-palette-secondary, 300);
        }
    }
}

* {
    box-sizing: border-box;
}

html, body {
    max-width: 100%;
    overflow-x: hidden;
}

body {
    margin: 0;
    font-family: Roboto, "Helvetica Neue", sans-serif;
}
